import * as React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Separator } from "@/components/ui/separator";
import { Progress } from "@/components/ui/progress";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { User, Project } from '@shared/schema';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { useQuery, useMutation } from '@tanstack/react-query';
import { format } from 'date-fns';
import {
  Users, Building, Mail, Phone, Globe, Calendar, FileText, 
  CreditCard, DollarSign, File, FilePlus, Tag, CheckCircle, 
  Clock, AlertCircle, MoreHorizontal, Trash2, Download, Send,
  Paperclip, Upload, Eye, Edit, Plus, PlusCircle, FileCheck, 
  MessageSquare, Star, PieChart, BarChart2, Share2, Clipboard,
  ArrowLeft, Image
} from 'lucide-react';

interface ClientProfileViewProps {
  clientId: number | string;
  onClose?: () => void;
}

export default function ClientProfileView({ clientId, onClose }: ClientProfileViewProps) {
  const { toast } = useToast();
  const [clientNotes, setClientNotes] = React.useState('');
  const [selectedPaymentPlan, setSelectedPaymentPlan] = React.useState('fixed');
  const [customAmount, setCustomAmount] = React.useState('');
  const [paymentFormData, setPaymentFormData] = React.useState<any>(null);
  
  // Invoice form state
  const [invoiceFormData, setInvoiceFormData] = React.useState({
    projectId: '',
    amount: '',
    dueDate: '',
    description: '',
    invoiceNumber: `INV-${Date.now().toString().substring(6)}`
  });
  
  // Track invoice dialog open state
  const [invoiceDialogOpen, setInvoiceDialogOpen] = React.useState(false);
  
  // Payment processing state
  const [paymentMethod, setPaymentMethod] = React.useState('');
  const [paymentNotes, setPaymentNotes] = React.useState('');
  const [paymentDialogOpen, setPaymentDialogOpen] = React.useState(false);
  
  // Email dialog state
  const [emailDialogOpen, setEmailDialogOpen] = React.useState(false);
  const [emailSubject, setEmailSubject] = React.useState('');
  const [emailMessage, setEmailMessage] = React.useState('');
  const [emailInvoiceId, setEmailInvoiceId] = React.useState<number | null>(null);
  const [emailType, setEmailType] = React.useState<'invoice' | 'receipt'>('invoice');
  
  // Create invoice mutation
  const createInvoice = useMutation({
    mutationFn: async (data: any) => {
      console.log('Creating invoice with payload:', data);

      // Prepare request payload
      const payload = {
        clientId: Number(clientId),
        projectId: data.projectId ? Number(data.projectId) : null,
        invoiceNumber: data.invoiceNumber,
        amount: data.amount,
        currency: 'USD',
        status: 'pending',
        issueDate: new Date().toISOString().split('T')[0],
        dueDate: data.dueDate,
        description: data.description,
        items: [
          {
            description: data.description || 'Services',
            amount: parseFloat(data.amount),
            quantity: 1
          }
        ],
        notes: ''
      };
      
      console.log('Creating invoice with payload:', payload);
      
      // Use direct fetch API
      const requestHeaders: Record<string, string> = {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
      };
      
      // Add CSRF token if available
      const csrfToken = document.cookie
        .split('; ')
        .find(row => row.startsWith('csrf_token='))
        ?.split('=')[1];
        
      if (csrfToken) {
        requestHeaders['X-CSRF-Token'] = csrfToken;
      }
      
      const response = await fetch('/api/client-invoices', {
        method: 'POST',
        headers: requestHeaders,
        body: JSON.stringify(payload),
        credentials: 'include'
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
        throw new Error(errorData.message || 'Failed to create invoice');
      }
      
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: 'Invoice Created',
        description: 'The invoice has been created successfully.',
      });
      // Reset form and close dialog
      setInvoiceFormData({
        projectId: '',
        amount: '',
        dueDate: '',
        description: '',
        invoiceNumber: `INV-${Date.now().toString().substring(6)}`
      });
      // Close the dialog
      setInvoiceDialogOpen(false);
      // Refresh invoices data
      queryClient.invalidateQueries({ queryKey: ['/api/client-invoices', clientId] });
    },
    onError: (error: Error) => {
      toast({
        title: 'Error Creating Invoice',
        description: error.message,
        variant: 'destructive',
      });
    }
  });
  
  // Process payment mutation
  const processPayment = useMutation({
    mutationFn: async (data: any) => {
      console.log('Processing payment with payload:', data);
      
      // Prepare request payload
      const payload = {
        paymentMethod: data.paymentMethod,
        paidAmount: data.paidAmount,
        paymentDate: data.paymentDate,
        notes: data.notes || ''
      };
      
      const requestHeaders: Record<string, string> = {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
      };
      
      // Add CSRF token if available
      const csrfToken = document.cookie
        .split('; ')
        .find(row => row.startsWith('csrf_token='))
        ?.split('=')[1];
        
      if (csrfToken) {
        requestHeaders['X-CSRF-Token'] = csrfToken;
      }
      
      const response = await fetch(`/api/client-invoices/${data.invoiceId}/payment-receipt`, {
        method: 'POST',
        headers: requestHeaders,
        body: JSON.stringify(payload),
        credentials: 'include'
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
        throw new Error(errorData.message || 'Failed to process payment');
      }
      
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: 'Payment Processed',
        description: 'The payment has been processed successfully.',
      });
      // Reset payment form data
      setPaymentMethod('');
      setPaymentNotes('');
      // Close dialog if open
      setPaymentDialogOpen(false);
      // Refresh invoices data
      queryClient.invalidateQueries({ queryKey: ['/api/client-invoices', clientId] });
    },
    onError: (error: Error) => {
      toast({
        title: 'Error Processing Payment',
        description: error.message,
        variant: 'destructive',
      });
    }
  });
  
  // Save payment structure mutation
  const savePaymentStructure = useMutation({
    mutationFn: async (data: any) => {
      console.log('Saving payment structure with payload:', data);
      
      // Prepare request payload
      const payload = {
        clientId: data.clientId,
        projectId: data.projectId,
        paymentPlan: data.paymentPlan,
        totalAmount: data.totalAmount,
        initialAmount: data.initialAmount,
        remainingAmount: data.remainingAmount,
        customAmount: data.customAmount,
        createdAt: new Date().toISOString(),
        status: 'active'
      };
      
      const requestHeaders: Record<string, string> = {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
      };
      
      // Add CSRF token if available
      const csrfToken = document.cookie
        .split('; ')
        .find(row => row.startsWith('csrf_token='))
        ?.split('=')[1];
        
      if (csrfToken) {
        requestHeaders['X-CSRF-Token'] = csrfToken;
      }
      
      const response = await fetch('/api/payment-structures', {
        method: 'POST',
        headers: requestHeaders,
        body: JSON.stringify(payload),
        credentials: 'include'
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
        throw new Error(errorData.message || 'Failed to save payment structure');
      }
      
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: 'Payment Structure Saved',
        description: 'The payment structure has been saved successfully.',
      });
      // Reset form
      setPaymentFormData(null);
      // Refresh invoices data since payment structure may trigger invoice creation
      queryClient.invalidateQueries({ queryKey: ['/api/client-invoices', clientId] });
      // Reset payment form data
      setSelectedPaymentPlan('standard');
      setCustomAmount('0');
    },
    onError: (error: Error) => {
      toast({
        title: 'Error Saving Payment Structure',
        description: error.message,
        variant: 'destructive',
      });
    }
  });
  
  // Fetch client details
  const { 
    data: client, 
    isLoading: isLoadingClient 
  } = useQuery<User>({
    queryKey: ['/api/clients', clientId],
    queryFn: async () => {
      try {
        const res = await fetch(`/api/public/clients/${clientId}`);
        if (!res.ok) throw new Error('Failed to fetch client details');
        return res.json();
      } catch (error) {
        console.error('Error fetching client:', error);
        throw error;
      }
    },
    enabled: !!clientId
  });

  // Fetch client projects
  const { 
    data: clientProjects, 
    isLoading: isLoadingProjects 
  } = useQuery<Project[]>({
    queryKey: ['/api/projects/client', clientId],
    queryFn: async () => {
      try {
        const res = await fetch(`/api/public/client-projects/${clientId}`);
        if (!res.ok) throw new Error('Failed to fetch client projects');
        return res.json();
      } catch (error) {
        console.error('Error fetching client projects:', error);
        return [];
      }
    },
    enabled: !!clientId
  });

  // Calculate project statistics
  const projectStats = React.useMemo(() => {
    if (!clientProjects || clientProjects.length === 0) {
      return { total: 0, inProgress: 0, completed: 0, onHold: 0 };
    }
    
    const total = clientProjects.length;
    const inProgress = clientProjects.filter(p => p.status === 'In Progress').length;
    const completed = clientProjects.filter(p => p.status === 'Completed').length;
    const onHold = clientProjects.filter(p => p.status === 'On Hold').length;
    
    return { total, inProgress, completed, onHold };
  }, [clientProjects]);

  // Function to update client notes
  const updateClientNotes = useMutation({
    mutationFn: async (notes: string) => {
      const res = await apiRequest('PATCH', `/api/clients/${clientId}/notes`, { notes });
      if (!res.ok) throw new Error('Failed to update notes');
      return res.json();
    },
    onSuccess: () => {
      toast({
        title: 'Notes Updated',
        description: 'Client notes have been saved successfully.'
      });
      queryClient.invalidateQueries({ queryKey: ['/api/clients', clientId] });
    },
    onError: (error: Error) => {
      toast({
        title: 'Failed to Update Notes',
        description: error.message,
        variant: 'destructive'
      });
    }
  });

  // Fetch invoices from database
  const { 
    data: invoices, 
    isLoading: isLoadingInvoices 
  } = useQuery<any[]>({
    queryKey: ['/api/client-invoices', clientId],
    queryFn: async () => {
      try {
        // Use the public API endpoint since we're getting authentication issues
        const res = await fetch(`/api/public/client-invoices/${clientId}`);
        if (!res.ok) throw new Error('Failed to fetch invoices');
        return res.json();
      } catch (error) {
        console.error('Error fetching invoices:', error);
        // Return empty array instead of throwing to avoid breaking UI
        return [];
      }
    },
    enabled: !!clientId
  });

  // Calculate payment based on selected plan
  const calculatePayment = (total: number) => {
    switch (selectedPaymentPlan) {
      case 'fixed':
        return { initial: total, remaining: 0 };
      case '40-60':
        return { initial: total * 0.4, remaining: total * 0.6 };
      case 'custom':
        const initialAmount = parseFloat(customAmount) || 0;
        return { initial: initialAmount, remaining: total - initialAmount };
      default:
        return { initial: total, remaining: 0 };
    }
  };

  // Calculate payment phases from client projects
  const paymentPhases = React.useMemo(() => {
    if (!clientProjects || clientProjects.length === 0) return [];
    
    // Use the largest active project for payment phases
    const activeProjects = clientProjects.filter(p => p.status === 'In Progress');
    if (activeProjects.length === 0) return [];
    
    // Find project with highest budget or use first one
    const project = activeProjects.reduce((highest, current) => {
      return (current.budget || 0) > (highest.budget || 0) ? current : highest;
    }, activeProjects[0]);
    
    const projectBudget = project.budget || 5000; // Default to 5000 if no budget
    
    // Calculate payment phases based on selected payment plan
    const { initial, remaining } = calculatePayment(projectBudget);
    
    return [
      {
        phase: selectedPaymentPlan === 'fixed' ? 'Full Payment' : 
              selectedPaymentPlan === '40-60' ? 'Initial (40%)' : 
              `Initial Payment ($${initial.toFixed(2)})`,
        amount: initial,
        status: 'Pending',
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 7 days from now
        projectId: project.id
      },
      ...(remaining > 0 ? [{
        phase: selectedPaymentPlan === '40-60' ? 'Remaining (60%)' : `Remaining Balance ($${remaining.toFixed(2)})`,
        amount: remaining,
        status: 'Pending',
        dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days from now
        projectId: project.id
      }] : [])
    ];
  }, [clientProjects, selectedPaymentPlan, customAmount]);

  // Dummy files for the UI
  const clientFiles = [
    {
      id: 'file-001',
      name: 'Contract_2025.pdf',
      type: 'pdf',
      size: '1.2 MB',
      uploadDate: '2025-03-10',
      category: 'Contract'
    },
    {
      id: 'file-002',
      name: 'Project_Specifications.docx',
      type: 'docx',
      size: '845 KB',
      uploadDate: '2025-03-12',
      category: 'Specification'
    },
    {
      id: 'file-003',
      name: 'Invoice_March.pdf',
      type: 'pdf',
      size: '520 KB',
      uploadDate: '2025-03-31',
      category: 'Invoice'
    },
    {
      id: 'file-004',
      name: 'Logo_Options.png',
      type: 'png',
      size: '2.4 MB',
      uploadDate: '2025-04-05',
      category: 'Design'
    }
  ];

  // Dummy activity feed
  const activityFeed = [
    {
      id: 1,
      type: 'project_created',
      message: 'New project "Website Redesign" created',
      date: '2025-04-10T14:32:00Z'
    },
    {
      id: 2,
      type: 'payment_received',
      message: 'Payment of $2,000 received for INV-001',
      date: '2025-04-08T10:15:00Z'
    },
    {
      id: 3,
      type: 'document_uploaded',
      message: 'New document "Project Brief" uploaded',
      date: '2025-04-05T16:45:00Z'
    },
    {
      id: 4,
      type: 'comment_added',
      message: 'Comment added to project "Mobile App Development"',
      date: '2025-04-02T11:22:00Z'
    }
  ];

  // Format date for display
  const formatDate = (dateInput: string | Date) => {
    try {
      if (!dateInput) return 'N/A';
      // Validate date before formatting
      const date = new Date(dateInput);
      if (isNaN(date.getTime())) {
        return 'Invalid date';
      }
      return format(date, 'MMM dd, yyyy');
    } catch (error) {
      console.error('Error formatting date:', error);
      return 'Invalid date';
    }
  };


  if (isLoadingClient) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="flex items-center space-x-2">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
          <span>Loading client profile...</span>
        </div>
      </div>
    );
  }

  if (!client) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <AlertCircle className="h-10 w-10 text-destructive mb-2" />
        <h3 className="text-lg font-medium">Client not found</h3>
        <p className="text-muted-foreground">The requested client could not be found.</p>
        {onClose && (
          <Button onClick={onClose} className="mt-4">
            Close
          </Button>
        )}
      </div>
    );
  }

  return (
    <div className="bg-background rounded-lg shadow-md overflow-hidden">
      {/* Client Header */}
      <div className="p-6 border-b">
        <div className="flex items-start justify-between">
          <div className="flex items-center">
            {window.location.pathname.includes('/manager/clients/') && (
              <Button 
                variant="ghost" 
                size="sm" 
                className="mr-2" 
                onClick={() => window.location.href = '/manager/clients'}
              >
                <ArrowLeft className="h-4 w-4 mr-1" /> Back to Clients
              </Button>
            )}
            <Avatar className="h-16 w-16 mr-4">
              <AvatarImage src={client.profilePicture || ''} alt={client.name || client.username} />
              <AvatarFallback className="text-lg font-semibold">
                {(client.name || client.username || '').substring(0, 2).toUpperCase()}
              </AvatarFallback>
            </Avatar>
            <div>
              <h2 className="text-2xl font-bold">{client.name || client.username}</h2>
              <div className="flex items-center text-muted-foreground">
                <Building className="h-4 w-4 mr-1" />
                <span>{client.company || 'No company specified'}</span>
              </div>
              <div className="flex items-center space-x-4 mt-2">
                <Badge variant={client.isActive ? 'default' : 'secondary'}>
                  {client.isActive ? 'Active' : 'Inactive'}
                </Badge>
                {client.isVip && (
                  <Badge variant="outline" className="bg-amber-100 text-amber-800 hover:bg-amber-200 border-amber-300">
                    <Star className="h-3 w-3 mr-1 fill-amber-500 text-amber-500" /> VIP
                  </Badge>
                )}
                {client.isPriority && (
                  <Badge variant="outline" className="bg-red-100 text-red-800 hover:bg-red-200 border-red-300">
                    High Priority
                  </Badge>
                )}
              </div>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm">
              <Mail className="h-4 w-4 mr-1" /> Email
            </Button>
            <Button variant="outline" size="sm">
              <Phone className="h-4 w-4 mr-1" /> Call
            </Button>
            {onClose && (
              <Button variant="ghost" size="sm" onClick={onClose}>
                Close
              </Button>
            )}
          </div>
        </div>
      </div>

      {/* Tabbed Content */}
      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="w-full justify-start px-6 border-b rounded-none bg-background">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="projects">Projects</TabsTrigger>
          <TabsTrigger value="pricing">Pricing & Billing</TabsTrigger>
          <TabsTrigger value="files">Files & Docs</TabsTrigger>
        </TabsList>
        
        {/* Overview Tab */}
        <TabsContent value="overview" className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="md:col-span-2">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Total Projects</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{projectStats.total}</div>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">In Progress</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{projectStats.inProgress}</div>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Completed</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{projectStats.completed}</div>
                  </CardContent>
                </Card>
              </div>
              
              <Card className="mb-6">
                <CardHeader>
                  <CardTitle>Client Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <h4 className="text-sm font-medium text-muted-foreground mb-1">Email</h4>
                      <p>{client.email || 'No email specified'}</p>
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-muted-foreground mb-1">Phone</h4>
                      <p>{client.phone || 'No phone specified'}</p>
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-muted-foreground mb-1">Company</h4>
                      <p>{client.company || 'No company specified'}</p>
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-muted-foreground mb-1">Website</h4>
                      <p>{client.website || 'No website specified'}</p>
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-muted-foreground mb-1">Client Since</h4>
                      <p>{client.createdAt ? formatDate(client.createdAt) : 'Unknown'}</p>
                    </div>
                    <div>
                      <h4 className="text-sm font-medium text-muted-foreground mb-1">Last Activity</h4>
                      <p>{client.lastLogin ? formatDate(client.lastLogin) : 'Never'}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Recent Activity</CardTitle>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-[200px] pr-4">
                    {activityFeed.map((activity) => (
                      <div key={activity.id} className="mb-4 pb-4 border-b last:border-0">
                        <div className="flex justify-between items-start">
                          <div className="flex items-start">
                            <div className="rounded-full bg-primary/10 p-2 mr-3">
                              {activity.type === 'project_created' && <FileText className="h-4 w-4 text-primary" />}
                              {activity.type === 'payment_received' && <DollarSign className="h-4 w-4 text-green-500" />}
                              {activity.type === 'document_uploaded' && <FileCheck className="h-4 w-4 text-blue-500" />}
                              {activity.type === 'comment_added' && <MessageSquare className="h-4 w-4 text-amber-500" />}
                            </div>
                            <div>
                              <p className="text-sm">{activity.message}</p>
                            </div>
                          </div>
                          <span className="text-xs text-muted-foreground">
                            {formatDate(activity.date)}
                          </span>
                        </div>
                      </div>
                    ))}
                  </ScrollArea>
                </CardContent>
              </Card>
            </div>
            
            <div className="md:col-span-1">
              <Card className="mb-6">
                <CardHeader>
                  <CardTitle>Client Notes</CardTitle>
                </CardHeader>
                <CardContent>
                  <Textarea 
                    placeholder="Add notes about this client..." 
                    className="min-h-[150px]"
                    value={clientNotes || (client.notes || '')}
                    onChange={(e) => setClientNotes(e.target.value)}
                  />
                  <Button 
                    className="mt-2 w-full" 
                    onClick={() => updateClientNotes.mutate(clientNotes)}
                    disabled={updateClientNotes.isPending}
                  >
                    {updateClientNotes.isPending ? 'Saving...' : 'Save Notes'}
                  </Button>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Tags & Labels</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {client.isVip && (
                      <Badge className="bg-amber-100 text-amber-800 hover:bg-amber-200 border-amber-300">
                        <Star className="h-3 w-3 mr-1 fill-amber-500 text-amber-500" /> VIP
                      </Badge>
                    )}
                    {client.isPriority && (
                      <Badge className="bg-red-100 text-red-800 hover:bg-red-200 border-red-300">
                        High Priority
                      </Badge>
                    )}
                    <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200 border-blue-300">
                      {client.industry || 'Technology'}
                    </Badge>
                    <Badge className="bg-purple-100 text-purple-800 hover:bg-purple-200 border-purple-300">
                      {client.referralSource || 'Website'}
                    </Badge>
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button variant="outline" size="sm" className="mt-2">
                          <PlusCircle className="h-3 w-3 mr-1" /> Add Tag
                        </Button>
                      </DialogTrigger>
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>Add Tag</DialogTitle>
                          <DialogDescription>
                            Create a new tag for this client.
                          </DialogDescription>
                        </DialogHeader>
                        <div className="grid gap-4 py-4">
                          <div className="grid grid-cols-4 items-center gap-4">
                            <Label htmlFor="tagName" className="text-right">
                              Tag Name
                            </Label>
                            <Input id="tagName" className="col-span-3" />
                          </div>
                          <div className="grid grid-cols-4 items-center gap-4">
                            <Label htmlFor="tagColor" className="text-right">
                              Color
                            </Label>
                            <Select>
                              <SelectTrigger className="col-span-3">
                                <SelectValue placeholder="Select a color" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="blue">Blue</SelectItem>
                                <SelectItem value="green">Green</SelectItem>
                                <SelectItem value="red">Red</SelectItem>
                                <SelectItem value="purple">Purple</SelectItem>
                                <SelectItem value="yellow">Yellow</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>
                        <DialogFooter>
                          <Button type="submit">Add Tag</Button>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>
        
        {/* Projects Tab */}
        <TabsContent value="projects" className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-semibold">Client Projects</h3>
            <Button onClick={() => window.location.href = '/manager/project/create'}>
              <Plus className="h-4 w-4 mr-2" /> New Project
            </Button>
          </div>
          
          {isLoadingProjects ? (
            <div className="flex justify-center items-center py-12">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
              <span className="ml-2">Loading projects...</span>
            </div>
          ) : clientProjects && clientProjects.length > 0 ? (
            <div className="grid grid-cols-1 gap-4">
              {clientProjects.map((project) => (
                <Card key={project.id} className="hover:shadow-md transition-shadow">
                  <CardHeader className="pb-2">
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle>{project.title}</CardTitle>
                        <CardDescription className="mt-1">
                          {project.description && project.description.length > 100 
                            ? `${project.description.substring(0, 100)}...` 
                            : project.description || 'No description provided'}
                        </CardDescription>
                      </div>
                      <Badge 
                        className={
                          project.status === 'Completed' ? 'bg-green-100 text-green-800 hover:bg-green-200' :
                          project.status === 'In Progress' ? 'bg-blue-100 text-blue-800 hover:bg-blue-200' :
                          'bg-amber-100 text-amber-800 hover:bg-amber-200'
                        }
                      >
                        {project.status === 'Completed' && <CheckCircle className="h-3 w-3 mr-1" />}
                        {project.status === 'In Progress' && <Clock className="h-3 w-3 mr-1" />}
                        {project.status === 'On Hold' && <AlertCircle className="h-3 w-3 mr-1" />}
                        {project.status || 'Unknown'}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="mb-4">
                      <div className="flex justify-between text-sm mb-1">
                        <span>Progress</span>
                        <span>{project.progress || 0}%</span>
                      </div>
                      <Progress value={project.progress || 0} className="h-2" />
                    </div>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-muted-foreground">Start Date:</span>
                        <span className="ml-2">
                          {project.startDate ? formatDate(project.startDate) : 'Not set'}
                        </span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Deadline:</span>
                        <span className="ml-2">
                          {project.endDate ? formatDate(project.endDate) : 'No deadline'}
                        </span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Budget:</span>
                        <span className="ml-2">
                          ${project.budget ? project.budget.toLocaleString() : 'Not set'}
                        </span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Team Size:</span>
                        <span className="ml-2">{project.teamSize || 'Not specified'}</span>
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="flex justify-between border-t pt-4">
                    <Button variant="outline" size="sm">
                      <Eye className="h-4 w-4 mr-1" /> View Details
                    </Button>
                    <Button variant="outline" size="sm">
                      <Edit className="h-4 w-4 mr-1" /> Edit Project
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          ) : (
            <Card className="bg-muted/50">
              <CardContent className="flex flex-col items-center justify-center py-12">
                <FileText className="h-12 w-12 text-muted-foreground mb-4" />
                <h3 className="text-xl font-medium mb-2">No projects found</h3>
                <p className="text-muted-foreground text-center mb-6">
                  This client doesn't have any projects yet.
                </p>
                <Button onClick={() => window.location.href = '/manager/project/create'}>
                  <Plus className="h-4 w-4 mr-2" /> Create First Project
                </Button>
              </CardContent>
            </Card>
          )}
        </TabsContent>
        
        {/* Pricing & Billing Tab */}
        <TabsContent value="pricing" className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Card className="mb-6">
                <CardHeader>
                  <CardTitle>Payment Structure</CardTitle>
                  <CardDescription>Set up the client's payment structure</CardDescription>
                </CardHeader>
                <CardContent>
                  {isLoadingProjects ? (
                    <div className="flex items-center justify-center h-40">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                    </div>
                  ) : !clientProjects || clientProjects.length === 0 ? (
                    <div className="text-center py-6 text-muted-foreground">
                      <p>No projects available</p>
                      <p className="text-sm mt-1">Create a project to set up payment structure.</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="project-select">Project</Label>
                        <Select 
                          value={paymentFormData?.projectId?.toString() || ''} 
                          onValueChange={(value) => setPaymentFormData(prev => ({
                            ...prev || {},
                            projectId: Number(value)
                          }))}
                        >
                          <SelectTrigger id="project-select">
                            <SelectValue placeholder="Select project" />
                          </SelectTrigger>
                          <SelectContent>
                            {clientProjects.map(project => (
                              <SelectItem key={project.id} value={project.id.toString()}>
                                {project.title}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="payment-plan">Payment Plan</Label>
                        <Select 
                          value={selectedPaymentPlan} 
                          onValueChange={(value) => {
                            setSelectedPaymentPlan(value);
                            setPaymentFormData(prev => ({
                              ...prev || {},
                              paymentPlan: value
                            }));
                          }}
                        >
                          <SelectTrigger id="payment-plan">
                            <SelectValue placeholder="Select payment plan" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="fixed">Fixed Full Payment</SelectItem>
                            <SelectItem value="40-60">40% Upfront + 60% on Completion</SelectItem>
                            <SelectItem value="custom">Custom Payment</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      {selectedPaymentPlan === 'custom' && (
                        <div className="space-y-2">
                          <Label htmlFor="custom-amount">Initial Payment Amount ($)</Label>
                          <Input 
                            id="custom-amount" 
                            type="number" 
                            placeholder="Enter amount" 
                            value={customAmount}
                            onChange={(e) => {
                              setCustomAmount(e.target.value);
                              setPaymentFormData(prev => ({
                                ...prev || {},
                                initialAmount: parseFloat(e.target.value)
                              }));
                            }}
                          />
                        </div>
                      )}
                      
                      {paymentFormData?.projectId && (
                        <div className="rounded-lg border p-4 mt-4">
                          <h4 className="font-medium mb-2">Billing Breakdown</h4>
                          {(() => {
                            const selectedProject = clientProjects.find(p => p.id === paymentFormData.projectId);
                            const totalAmount = selectedProject?.budget || 5000;
                            const { initial, remaining } = calculatePayment(totalAmount);
                            
                            return (
                              <div className="space-y-2 text-sm">
                                <div className="flex justify-between">
                                  <span>Project:</span>
                                  <span className="font-medium">{selectedProject?.title || 'Unknown'}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span>Total Project Amount:</span>
                                  <span className="font-medium">${totalAmount.toLocaleString()}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span>Initial Payment:</span>
                                  <span className="font-medium">${initial.toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span>Remaining Balance:</span>
                                  <span className="font-medium">${remaining.toFixed(2)}</span>
                                </div>
                              </div>
                            );
                          })()}
                        </div>
                      )}
                      
                      <Button 
                        className="w-full"
                        disabled={!paymentFormData?.projectId || savePaymentStructure.isPending}
                        onClick={() => {
                          if (paymentFormData?.projectId) {
                            const selectedProject = clientProjects.find(p => p.id === paymentFormData.projectId);
                            const totalAmount = selectedProject?.budget || 5000;
                            const { initial, remaining } = calculatePayment(totalAmount);
                            
                            // Prepare data for all the payment phases based on the structure
                            savePaymentStructure.mutate({
                              clientId: Number(clientId),
                              projectId: paymentFormData.projectId,
                              paymentPlan: selectedPaymentPlan,
                              initialAmount: initial,
                              remainingAmount: remaining,
                              totalAmount: totalAmount,
                              customAmount: selectedPaymentPlan === 'custom' ? parseFloat(customAmount) : undefined
                            });
                          }
                        }}
                      >
                        {savePaymentStructure.isPending ? 'Saving...' : 'Save Payment Structure'}
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Billing Timeline</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b">
                          <th className="py-2 px-3 text-left font-medium">Payment Phase</th>
                          <th className="py-2 px-3 text-left font-medium">Amount</th>
                          <th className="py-2 px-3 text-left font-medium">Status</th>
                          <th className="py-2 px-3 text-left font-medium">Due Date</th>
                          <th className="py-2 px-3 text-left font-medium">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {paymentPhases.map((phase, index) => (
                          <tr key={index} className="border-b last:border-0">
                            <td className="py-3 px-3">{phase.phase}</td>
                            <td className="py-3 px-3">${phase.amount.toLocaleString()}</td>
                            <td className="py-3 px-3">
                              <Badge className={
                                phase.status === 'Paid' ? 'bg-green-100 text-green-800' :
                                phase.status === 'Pending' ? 'bg-blue-100 text-blue-800' :
                                'bg-red-100 text-red-800'
                              }>
                                {phase.status}
                              </Badge>
                            </td>
                            <td className="py-3 px-3">{formatDate(phase.dueDate)}</td>
                            <td className="py-3 px-3">
                              {phase.status === 'Pending' ? (
                                <Button size="sm" variant="outline">
                                  <DollarSign className="h-3 w-3 mr-1" /> Record Payment
                                </Button>
                              ) : (
                                <Button size="sm" variant="outline">
                                  <Download className="h-3 w-3 mr-1" /> Receipt
                                </Button>
                              )}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            <div>
              <div className="p-6 mb-6">
                <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                  <h2 className="text-3xl font-bold mb-4 md:mb-0">Recent Invoices</h2>
                  <Dialog open={invoiceDialogOpen} onOpenChange={setInvoiceDialogOpen}>
                    <DialogTrigger asChild>
                      <Button size="lg" className="gap-2 px-6 h-12 bg-[#15192C] hover:bg-[#0f1321]">
                        <Plus className="h-5 w-5" /> Create Invoice
                      </Button>
                    </DialogTrigger>
                      <DialogContent className="max-w-xl">
                        <DialogHeader>
                          <DialogTitle>Create New Invoice</DialogTitle>
                          <DialogDescription>
                            Generate a new invoice for this client.
                          </DialogDescription>
                        </DialogHeader>
                        <form onSubmit={(e) => {
                          e.preventDefault();
                          createInvoice.mutate(invoiceFormData);
                        }}>
                          <div className="grid gap-4 py-4">
                            <div className="grid grid-cols-4 items-center gap-4">
                              <Label htmlFor="invoice-project" className="text-right">
                                Project
                              </Label>
                              <Select 
                                onValueChange={(value) => 
                                  setInvoiceFormData({...invoiceFormData, projectId: value})
                                }
                                value={invoiceFormData.projectId}
                              >
                                <SelectTrigger id="invoice-project" className="col-span-3">
                                  <SelectValue placeholder="Select project" />
                                </SelectTrigger>
                                <SelectContent>
                                  {clientProjects?.map(project => (
                                    <SelectItem key={project.id} value={project.id.toString()}>
                                      {project.title}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            <div className="grid grid-cols-4 items-center gap-4">
                              <Label htmlFor="invoice-amount" className="text-right">
                                Amount
                              </Label>
                              <Input 
                                id="invoice-amount" 
                                type="number" 
                                className="col-span-3" 
                                placeholder="0.00" 
                                value={invoiceFormData.amount}
                                onChange={(e) => 
                                  setInvoiceFormData({...invoiceFormData, amount: e.target.value})
                                }
                                required
                              />
                            </div>
                            <div className="grid grid-cols-4 items-center gap-4">
                              <Label htmlFor="invoice-date" className="text-right">
                                Due Date
                              </Label>
                              <Input 
                                id="invoice-date" 
                                type="date" 
                                className="col-span-3" 
                                value={invoiceFormData.dueDate}
                                onChange={(e) => 
                                  setInvoiceFormData({...invoiceFormData, dueDate: e.target.value})
                                }
                                required
                              />
                            </div>
                            <div className="grid grid-cols-4 items-center gap-4">
                              <Label htmlFor="invoice-description" className="text-right">
                                Description
                              </Label>
                              <Textarea 
                                id="invoice-description" 
                                className="col-span-3" 
                                placeholder="Invoice details..." 
                                value={invoiceFormData.description}
                                onChange={(e) => 
                                  setInvoiceFormData({...invoiceFormData, description: e.target.value})
                                }
                              />
                            </div>
                            <div className="grid grid-cols-4 items-center gap-4">
                              <Label htmlFor="invoice-number" className="text-right">
                                Invoice #
                              </Label>
                              <Input 
                                id="invoice-number" 
                                className="col-span-3" 
                                value={invoiceFormData.invoiceNumber}
                                onChange={(e) => 
                                  setInvoiceFormData({...invoiceFormData, invoiceNumber: e.target.value})
                                }
                                required
                              />
                            </div>
                          </div>
                          <DialogFooter>
                            <Button 
                              type="submit" 
                              disabled={createInvoice.isPending}
                            >
                              {createInvoice.isPending ? 'Creating...' : 'Create Invoice'}
                            </Button>
                          </DialogFooter>
                        </form>
                      </DialogContent>
                    </Dialog>
                  </div>

                  {isLoadingInvoices ? (
                    <div className="flex items-center justify-center h-48">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                    </div>
                  ) : !invoices || invoices.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      <FileText className="h-12 w-12 mx-auto mb-3 text-muted" />
                      <p>No invoices found</p>
                      <p className="text-sm mt-1">Create an invoice to get started.</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {invoices.map((invoice: any) => {
                        // Find related project title if projectId exists
                        const projectTitle = invoice.projectId && clientProjects 
                          ? clientProjects.find(p => p.id === invoice.projectId)?.title || 'Unknown Project'
                          : 'General Services';

                        return (
                          <div key={invoice.id} className="border rounded-lg p-5 hover:bg-muted/10 transition-colors">
                            <div className="flex flex-col">
                              <div className="flex justify-between items-center mb-2">
                                <h4 className="font-medium flex items-center text-lg">
                                  <FileText className="h-5 w-5 mr-2 text-primary" />
                                  {invoice.invoiceNumber} - {projectTitle}
                                </h4>
                                <Badge className={
                                  invoice.status === 'paid' ? 'bg-green-100 text-green-800 px-3 py-1' :
                                  invoice.status === 'pending' ? 'bg-blue-100 text-blue-800 px-3 py-1' :
                                  'bg-red-100 text-red-800 px-3 py-1'
                                }>
                                  {invoice.status.charAt(0).toUpperCase() + invoice.status.slice(1)}
                                </Badge>
                              </div>
                              
                              <div className="text-sm text-muted-foreground mb-4">
                                Issued: {formatDate(invoice.issueDate)} • Due: {formatDate(invoice.dueDate)}
                              </div>
                              
                              <div className="text-2xl font-bold mb-4">${Number(invoice.amount).toLocaleString()}</div>
                              
                              <div className="flex flex-wrap gap-2">
                                <Dialog>
                                  <DialogTrigger asChild>
                                    <Button size="default" variant="outline" className="px-4 py-2 h-10">
                                      <Eye className="h-4 w-4 mr-2" /> View
                                    </Button>
                                  </DialogTrigger>
                                  <DialogContent className="max-w-3xl">
                                    <DialogHeader>
                                      <DialogTitle>Invoice #{invoice.invoiceNumber}</DialogTitle>
                                    </DialogHeader>
                                    <div className="grid gap-4 py-4">
                                      <div className="border-b pb-4">
                                        {/* Company Header */}
                                        <div className="mb-6 flex justify-between items-start">
                                          <div>
                                            <h2 className="text-xl font-bold text-blue-800">AdiTeke Software Solutions</h2>
                                            <div className="text-sm text-gray-600 mt-1">
                                              <p>Portland, OR, USA</p>
                                              <p>contact@aditeke.com</p>
                                              <p>www.aditeke.com</p>
                                            </div>
                                          </div>
                                          <div className="text-right">
                                            <h3 className="text-lg font-bold">{invoice.status === 'paid' ? 'RECEIPT' : 'INVOICE'}</h3>
                                            <p className="text-sm">#{invoice.invoiceNumber}</p>
                                          </div>
                                        </div>
                                        
                                        <div className="flex justify-between mb-4">
                                          <div>
                                            <h3 className="text-lg font-semibold">Invoice #{invoice.invoiceNumber}</h3>
                                            <p>Project: {projectTitle}</p>
                                          </div>
                                          <Badge className={
                                            invoice.status === 'paid' ? 'bg-green-100 text-green-800' :
                                            invoice.status === 'pending' ? 'bg-blue-100 text-blue-800' :
                                            'bg-red-100 text-red-800'
                                          }>
                                            {invoice.status.charAt(0).toUpperCase() + invoice.status.slice(1)}
                                          </Badge>
                                        </div>
                                        <div className="grid grid-cols-2 gap-4">
                                          <div>
                                            <h4 className="text-sm font-medium text-muted-foreground">Billed To</h4>
                                            <p>{client.name}</p>
                                            <p>{client.company || ''}</p>
                                            <p>{client.email}</p>
                                          </div>
                                          <div className="text-right">
                                            <h4 className="text-sm font-medium text-muted-foreground">Invoice Details</h4>
                                            <p>Issue Date: {formatDate(invoice.issueDate)}</p>
                                            <p>Due Date: {formatDate(invoice.dueDate)}</p>
                                            {invoice.paidDate && <p>Paid Date: {formatDate(invoice.paidDate)}</p>}
                                          </div>
                                        </div>
                                      </div>
                                      
                                      <div>
                                        <h4 className="text-sm font-medium text-muted-foreground mb-2">Invoice Items</h4>
                                        <table className="w-full">
                                          <thead>
                                            <tr className="border-b">
                                              <th className="py-2 px-3 text-left font-medium">Description</th>
                                              <th className="py-2 px-3 text-right font-medium">Quantity</th>
                                              <th className="py-2 px-3 text-right font-medium">Unit Price</th>
                                              <th className="py-2 px-3 text-right font-medium">Total</th>
                                            </tr>
                                          </thead>
                                          <tbody>
                                            {invoice.items && Array.isArray(invoice.items) ? invoice.items.map((item: any, idx: number) => (
                                              <tr key={idx} className="border-b">
                                                <td className="py-2 px-3">{item.description}</td>
                                                <td className="py-2 px-3 text-right">{item.quantity || 1}</td>
                                                <td className="py-2 px-3 text-right">${Number(item.amount).toLocaleString()}</td>
                                                <td className="py-2 px-3 text-right">${Number(item.amount * (item.quantity || 1)).toLocaleString()}</td>
                                              </tr>
                                            )) : (
                                              <tr className="border-b">
                                                <td className="py-2 px-3">{invoice.description || 'Services'}</td>
                                                <td className="py-2 px-3 text-right">1</td>
                                                <td className="py-2 px-3 text-right">${Number(invoice.amount).toLocaleString()}</td>
                                                <td className="py-2 px-3 text-right">${Number(invoice.amount).toLocaleString()}</td>
                                              </tr>
                                            )}
                                          </tbody>
                                          <tfoot>
                                            <tr>
                                              <td colSpan={3} className="py-2 px-3 text-right font-medium">Total Amount:</td>
                                              <td className="py-2 px-3 text-right font-bold">${Number(invoice.amount).toLocaleString()}</td>
                                            </tr>
                                          </tfoot>
                                        </table>
                                      </div>
                                      
                                      {invoice.notes && (
                                        <div>
                                          <h4 className="text-sm font-medium text-muted-foreground mb-2">Notes</h4>
                                          <p className="text-sm">{invoice.notes}</p>
                                        </div>
                                      )}
                                      
                                      {invoice.status === 'paid' && invoice.receiptNumber && (
                                        <div className="bg-green-50 p-3 rounded-lg">
                                          <h4 className="text-sm font-medium text-green-800 mb-1">Payment Information</h4>
                                          <p className="text-sm">Receipt: {invoice.receiptNumber}</p>
                                          <p className="text-sm">Paid on: {formatDate(invoice.paidDate)}</p>
                                          <p className="text-sm">Payment method: {invoice.paymentMethod || 'Manual payment'}</p>
                                        </div>
                                      )}
                                    </div>
                                    <DialogFooter>
                                      {invoice.status === 'paid' ? (
                                        <Button onClick={() => window.open(`/api/generate-receipt/${invoice.id}`, '_blank')}>
                                          <Download className="h-4 w-4 mr-1" /> Download Receipt
                                        </Button>
                                      ) : (
                                        <Button onClick={() => window.open(`/api/client-invoices/invoice/${invoice.id}`, '_blank')} variant="outline">
                                          <Download className="h-4 w-4 mr-1" /> Download Invoice
                                        </Button>
                                      )}
                                    </DialogFooter>
                                  </DialogContent>
                                </Dialog>
                                
                                {/* Invoice Action Buttons */}
                                <Button 
                                  size="default" 
                                  variant="outline"
                                  className="px-4 py-2 h-10"
                                  onClick={() => window.open(`/api/client-invoices/invoice/${invoice.id}`, '_blank')}
                                >
                                  <Download className="h-4 w-4 mr-2" /> Download
                                </Button>
                                
                                <Button 
                                  size="default" 
                                  variant="outline"
                                  className="px-4 py-2 h-10"
                                  onClick={() => {
                                    setEmailType('invoice');
                                    setEmailInvoiceId(invoice.id);
                                    setEmailSubject(`Invoice #${invoice.invoiceNumber} from AdiTeke Software Solutions`);
                                    setEmailMessage(`Dear ${client.name || client.username},\n\nPlease find attached your invoice #${invoice.invoiceNumber} for ${invoice.description || 'services rendered'}. Payment is due by ${formatDate(invoice.dueDate) || 'the due date indicated'}.\n\nThank you for your business.\n\nBest regards,\nAdiTeke Software Solutions Team`);
                                    setEmailDialogOpen(true);
                                  }}
                                >
                                  <Send className="h-4 w-4 mr-2" /> Send
                                </Button>
                                
                                {/* Payment Button - Only shown for unpaid invoices */}
                                {invoice.status !== 'paid' && (
                                  <Dialog open={paymentDialogOpen} onOpenChange={setPaymentDialogOpen}>
                                    <DialogTrigger asChild>
                                      <Button 
                                        size="default" 
                                        variant="default"
                                        className="px-4 py-2 h-10"
                                        onClick={() => {
                                          setPaymentDialogOpen(true);
                                          setPaymentMethod('');
                                          setPaymentNotes('');
                                        }}
                                      >
                                        <DollarSign className="h-4 w-4 mr-2" /> Record Payment
                                      </Button>
                                    </DialogTrigger>
                                    <DialogContent className="max-w-md">
                                      <DialogHeader>
                                        <DialogTitle>Process Payment for Invoice #{invoice.invoiceNumber}</DialogTitle>
                                        <DialogDescription>
                                          Record a payment for this invoice.
                                        </DialogDescription>
                                      </DialogHeader>
                                      
                                      {/* Company Header */}
                                      <div className="mb-6 flex justify-between items-start border-b pb-4">
                                        <div>
                                          <h2 className="text-xl font-bold text-blue-800">AdiTeke Software Solutions</h2>
                                          <div className="text-sm text-gray-600 mt-1">
                                            <p>Portland, OR, USA</p>
                                            <p>contact@aditeke.com</p>
                                          </div>
                                        </div>
                                        <div className="text-right">
                                          <div className="text-lg font-bold">Payment Processing</div>
                                          <p className="text-sm">Invoice #{invoice.invoiceNumber}</p>
                                          <p className="text-sm">Amount: ${Number(invoice.amount).toLocaleString()}</p>
                                        </div>
                                      </div>
                                      <form onSubmit={(e) => {
                                        e.preventDefault();
                                        processPayment.mutate({
                                          invoiceId: invoice.id,
                                          paymentMethod: paymentMethod,
                                          paidAmount: invoice.amount,
                                          paymentDate: new Date().toISOString().split('T')[0],
                                          notes: paymentNotes
                                        });
                                      }}>
                                        <div className="grid gap-4 py-4">
                                          <div className="grid grid-cols-4 items-center gap-4">
                                            <Label htmlFor="payment-method" className="text-right">
                                              Payment Method
                                            </Label>
                                            <Select 
                                              value={paymentMethod}
                                              onValueChange={setPaymentMethod}
                                            >
                                              <SelectTrigger id="payment-method" className="col-span-3">
                                                <SelectValue placeholder="Select method" />
                                              </SelectTrigger>
                                              <SelectContent>
                                                <SelectItem value="credit_card">Credit Card</SelectItem>
                                                <SelectItem value="bank_transfer">Bank Transfer</SelectItem>
                                                <SelectItem value="paypal">PayPal</SelectItem>
                                                <SelectItem value="cash">Cash</SelectItem>
                                                <SelectItem value="check">Check</SelectItem>
                                                <SelectItem value="other">Other</SelectItem>
                                              </SelectContent>
                                            </Select>
                                          </div>
                                          <div className="grid grid-cols-4 items-center gap-4">
                                            <Label htmlFor="payment-notes" className="text-right">
                                              Notes
                                            </Label>
                                            <Textarea 
                                              id="payment-notes"
                                              className="col-span-3"
                                              value={paymentNotes}
                                              onChange={(e) => setPaymentNotes(e.target.value)}
                                              placeholder="Any notes about this payment..."
                                            />
                                          </div>
                                        </div>
                                        <DialogFooter>
                                          <Button type="submit" disabled={!paymentMethod || processPayment.isPending}>
                                            {processPayment.isPending ? 'Processing...' : 'Record Payment'}
                                          </Button>
                                        </DialogFooter>
                                      </form>
                                    </DialogContent>
                                  </Dialog>
                                )}
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  )}
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Financial Summary</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {isLoadingInvoices ? (
                      <div className="flex items-center justify-center h-24">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                      </div>
                    ) : (
                      <>
                        <div className="grid grid-cols-2 gap-4">
                          <Card>
                            <CardContent className="pt-6">
                              <div className="text-center">
                                <DollarSign className="h-8 w-8 text-green-500 mx-auto mb-2" />
                                <div className="text-2xl font-bold">
                                  ${invoices && invoices.length > 0 
                                      ? invoices
                                        .filter((inv: any) => inv.status === 'paid')
                                        .reduce((sum: number, inv: any) => sum + Number(inv.paidAmount || inv.amount), 0)
                                        .toLocaleString()
                                      : '0'}
                                </div>
                                <p className="text-sm text-muted-foreground">Paid Amount</p>
                              </div>
                            </CardContent>
                          </Card>
                          <Card>
                            <CardContent className="pt-6">
                              <div className="text-center">
                                <CreditCard className="h-8 w-8 text-amber-500 mx-auto mb-2" />
                                <div className="text-2xl font-bold">
                                  ${invoices && invoices.length > 0 
                                     ? invoices
                                        .filter((inv: any) => inv.status === 'pending' || inv.status === 'overdue')
                                        .reduce((sum: number, inv: any) => sum + Number(inv.amount), 0)
                                        .toLocaleString()
                                      : '0'}
                                </div>
                                <p className="text-sm text-muted-foreground">Outstanding</p>
                              </div>
                            </CardContent>
                          </Card>
                        </div>
                        
                        <div className="rounded-lg border p-4">
                          <h4 className="font-medium mb-3">Payment Statistics</h4>
                          <div className="space-y-2">
                            {invoices && invoices.length > 0 ? (
                              <>
                                <div className="flex justify-between items-center">
                                  <span className="text-sm">Payment rate:</span>
                                  <div className="flex items-center">
                                    {(() => {
                                      // Calculate paid vs total ratio
                                      const totalInvoices = invoices.length;
                                      const paidInvoices = invoices.filter((inv: any) => inv.status === 'paid').length;
                                      const paymentRate = totalInvoices > 0 
                                        ? Math.round((paidInvoices / totalInvoices) * 100) 
                                        : 0;
                                      
                                      return (
                                        <>
                                          <span className="text-sm font-medium">{paymentRate}%</span>
                                          <div className="w-24 h-2 bg-muted ml-2 rounded-full overflow-hidden">
                                            <div className="h-full bg-green-500" style={{ width: `${paymentRate}%` }}></div>
                                          </div>
                                        </>
                                      );
                                    })()}
                                  </div>
                                </div>
                                <div className="flex justify-between items-center">
                                  <span className="text-sm">Latest invoice:</span>
                                  <span className="text-sm font-medium">
                                    {invoices.length > 0 
                                      ? formatDate(invoices.sort((a: any, b: any) => 
                                          new Date(b.issueDate).getTime() - new Date(a.issueDate).getTime())[0].issueDate)
                                      : 'N/A'}
                                  </span>
                                </div>
                                <div className="flex justify-between items-center">
                                  <span className="text-sm">Total billed amount:</span>
                                  <span className="text-sm font-medium">
                                    ${invoices
                                      .reduce((sum: number, inv: any) => sum + Number(inv.amount), 0)
                                      .toLocaleString()}
                                  </span>
                                </div>
                              </>
                            ) : (
                              <div className="text-center py-2 text-muted-foreground">
                                <p className="text-sm">No invoice data available</p>
                              </div>
                            )}
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>
        
        {/* Files & Docs Tab */}
        <TabsContent value="files" className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-semibold">Client Files & Documents</h3>
            <Dialog>
              <DialogTrigger asChild>
                <Button>
                  <Upload className="h-4 w-4 mr-2" /> Upload File
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Upload New File</DialogTitle>
                  <DialogDescription>
                    Upload a file to associate with this client.
                  </DialogDescription>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  <div className="border-2 border-dashed rounded-lg p-8 text-center">
                    <Upload className="h-8 w-8 mx-auto text-muted-foreground mb-2" />
                    <p className="text-sm text-muted-foreground mb-2">
                      Drag and drop files here, or click to browse
                    </p>
                    <Input id="file-upload" type="file" className="hidden" />
                    <Button size="sm" variant="outline" onClick={() => document.getElementById('file-upload')?.click()}>
                      Browse Files
                    </Button>
                    <p className="text-xs text-muted-foreground mt-2">
                      Max file size: 25MB
                    </p>
                  </div>
                  <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="file-category" className="text-right">
                      Category
                    </Label>
                    <Select>
                      <SelectTrigger id="file-category" className="col-span-3">
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="contract">Contract</SelectItem>
                        <SelectItem value="invoice">Invoice</SelectItem>
                        <SelectItem value="design">Design</SelectItem>
                        <SelectItem value="specification">Specification</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="file-description" className="text-right">
                      Description
                    </Label>
                    <Input id="file-description" className="col-span-3" placeholder="Optional description" />
                  </div>
                </div>
                <DialogFooter>
                  <Button type="submit">Upload</Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
            {clientFiles.map((file) => (
              <Card key={file.id} className="hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex flex-col items-center justify-center py-4 mb-3 bg-muted/40 rounded-lg">
                    {file.type === 'pdf' && <File className="h-12 w-12 text-red-500" />}
                    {file.type === 'docx' && <File className="h-12 w-12 text-blue-500" />}
                    {file.type === 'png' && <Image className="h-12 w-12 text-green-500" />}
                    {file.type === 'jpg' && <Image className="h-12 w-12 text-amber-500" />}
                  </div>
                  <div className="space-y-1">
                    <h4 className="font-medium truncate" title={file.name}>{file.name}</h4>
                    <div className="flex justify-between items-center text-sm text-muted-foreground">
                      <span>{file.size}</span>
                      <Badge variant="outline" className="text-xs font-normal">
                        {file.category}
                      </Badge>
                    </div>
                    <p className="text-xs text-muted-foreground">{formatDate(file.uploadDate)}</p>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-between border-t pt-2 pb-2">
                  <Button variant="outline" size="sm">
                    <Eye className="h-3 w-3 mr-1" /> View
                  </Button>
                  <Button variant="outline" size="sm">
                    <Download className="h-3 w-3 mr-1" /> Download
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
      
      {/* Email Dialog */}
      <Dialog open={emailDialogOpen} onOpenChange={setEmailDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {emailType === 'invoice' ? 'Send Invoice Email' : 'Send Receipt Email'}
            </DialogTitle>
            <DialogDescription>
              Customize the email before sending it to the client.
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="email-subject" className="text-right">
                Subject
              </Label>
              <Input
                id="email-subject"
                className="col-span-3"
                value={emailSubject}
                onChange={(e) => setEmailSubject(e.target.value)}
                placeholder={emailType === 'invoice' ? 'Invoice from AdiTeke Software Solutions' : 'Receipt from AdiTeke Software Solutions'}
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="email-message" className="text-right">
                Message
              </Label>
              <Textarea
                id="email-message"
                className="col-span-3"
                value={emailMessage}
                onChange={(e) => setEmailMessage(e.target.value)}
                placeholder={emailType === 'invoice' 
                  ? 'Please find attached your invoice. Payment is due within 30 days.' 
                  : 'Thank you for your payment. Please find attached your receipt.'}
                rows={4}
              />
            </div>
          </div>
          
          <DialogFooter>
            <Button
              type="submit"
              onClick={async () => {
                try {
                  toast({
                    title: "Sending email...",
                    description: `Please wait while we send the ${emailType}`,
                  });
                  
                  if (!emailInvoiceId) {
                    toast({
                      title: "Error",
                      description: "Missing invoice information",
                      variant: "destructive",
                    });
                    return;
                  }
                  
                  const endpoint = '/api/public/send-customized-email';
                    
                  const payload = {
                    invoiceId: emailInvoiceId,
                    emailType: emailType,
                    subject: emailSubject,
                    message: emailMessage
                  };
                  
                  const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload)
                  });
                  
                  const result = await response.json();
                  
                  if (result.success) {
                    toast({
                      title: `${emailType === 'invoice' ? 'Invoice' : 'Receipt'} Sent`,
                      description: `Email sent successfully`,
                      variant: "default",
                    });
                    setEmailDialogOpen(false);
                  } else {
                    toast({
                      title: "Error",
                      description: result.message || `Failed to send ${emailType} email`,
                      variant: "destructive",
                    });
                  }
                } catch (error) {
                  console.error(`Error sending ${emailType} email:`, error);
                  toast({
                    title: "Error",
                    description: `Failed to send ${emailType} email`,
                    variant: "destructive",
                  });
                }
              }}
            >
              Send Email
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

// Using the Image component from lucide-react instead